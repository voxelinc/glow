#version 430
#extension GL_ARB_shading_language_include : require

#include </transparency/hybrid.glsl>

uniform int dimension;

layout (local_size_x = 32) in;

void main() {
	if (gl_GlobalInvocationID.x < dimension) {
		uint depthBaseIndex = gl_GlobalInvocationID.x * ABUFFER_SIZE;
		uint visibilityBaseIndex = gl_GlobalInvocationID.x * VISIBILITY_KTAB_SIZE;

		uint packedDepthAlpha = depthKTab[depthBaseIndex];
		if (packedDepthAlpha == MAX_UINT) { // no fragments
			return;
		}
		
		// first fragment
		float alpha = unpackAlpha(packedDepthAlpha);
		visibilityKTab[visibilityBaseIndex] = alpha;

		float accumulatedVisibility = alpha;
		float visibility;

		// other fragments
		for (int i = 1; i < ABUFFER_SIZE; ++i) {
			packedDepthAlpha = depthKTab[depthBaseIndex + i];
			if (packedDepthAlpha < MAX_UINT) {
				alpha = unpackAlpha(packedDepthAlpha);
				visibility = alpha * (1.0 - accumulatedVisibility);
				accumulatedVisibility += visibility;
				visibilityKTab[visibilityBaseIndex + i] = visibility;
			}
		}

		// tail remainder
		visibilityKTab[visibilityBaseIndex + ABUFFER_SIZE] = accumulatedVisibility;
	}
}
